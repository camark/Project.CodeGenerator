@using System.Collections
@using System.Collections.Generic
@using System.Linq
@using System.Text
@using Project.CodeGenerator.DBSchema
@using RazorEngine.Text
@{
    Table table = (Table)Model;
    string tableName = table.TableName;
    string modelClassName = tableName;
    string classnameVal = ViewBag.classnameVal;
    string namespaceVal = ViewBag.namespaceVal;
    string modelNamespaceVal = ViewBag.modelNamespaceVal;
}
<h1>
    using System;
    using System.Text;
    using DapperExt;
    using @modelNamespaceVal;

    namespace @namespaceVal
    {
    public class @classnameVal
    {
    //
    @{
        string FunAdd_Columns = "";
        string FunAdd_Params = "";
        foreach (Column c in table.Columns)
        {
            if (c.IsPK || c.IsTimestamp)
            {
                continue;
            }
            FunAdd_Columns += c.ColumnName + ",";
            FunAdd_Params += "@" + c.ColumnName + ",";
        }
        FunAdd_Columns = FunAdd_Columns.TrimEnd(',');
        FunAdd_Params = FunAdd_Params.TrimEnd(',');
    }
    public int Add(@modelClassName model)
    {
    StringBuilder strSql = new StringBuilder();
    strSql.Append("insert into [@tableName](");
    strSql.Append("@FunAdd_Columns)");
    strSql.Append(" values (");
    strSql.Append("@FunAdd_Params)");
    //
    var id= DbHelperSql.InsertReturnId(strSql.ToString(), model);
    return id;
    }
    //
    @{
        string FunDeleteById_Where = "";
        string FunDeleteById_ParamsFun = "";
        string FunDeleteById_ParamsModel = "";
        for (int i = 0; i < table.PKs.Count; i++)
        {
            Column c = table.PKs[i];
            string name = c.ColumnName;
            string lowerName = c.LowerColumnName;
            string typeName = c.TypeName;
            if (i == 0)
            {
                FunDeleteById_Where += string.Format(" {0}=@{1} ", name, lowerName);
                FunDeleteById_ParamsFun += string.Format(" {0} {1} ", typeName, lowerName);
                FunDeleteById_ParamsModel += string.Format(" {0}={1} ", name, lowerName);
                continue;
            }
            FunDeleteById_Where += string.Format(" and {0}=@{1} ", name,lowerName);
            FunDeleteById_ParamsFun += string.Format(" ,{0} {1} ", typeName, lowerName);
            FunDeleteById_ParamsModel += string.Format(" , {0}={1} ", name, lowerName);
        }
    }
    public bool DeleteById(@FunDeleteById_ParamsFun)
    {
    StringBuilder strSql = new StringBuilder();
    strSql.Append("delete from [@tableName] ");
    strSql.Append("where @FunDeleteById_Where");
    //
    var flag= DbHelperSql.Delete(strSql.ToString(), new @modelClassName { @FunDeleteById_ParamsModel });
    return flag;
    }
    }
    }
</h1>